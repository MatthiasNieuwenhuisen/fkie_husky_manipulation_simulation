husky_joint_publisher:
  type: "joint_state_controller/JointStateController"
  publish_rate: 50

husky_velocity_controller:
  type: "diff_drive_controller/DiffDriveController"
  left_wheel: ['front_left_wheel', 'rear_left_wheel']
  right_wheel: ['front_right_wheel', 'rear_right_wheel']
  publish_rate: 50
  pose_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
  twist_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
  cmd_vel_timeout: 0.25
  velocity_rolling_window_size: 2

  # Base frame_id
  base_frame_id: base_link

  # Odometry fused with IMU is published by robot_localization, so
  # no need to publish a TF based on encoders alone.
  enable_odom_tf: false

  # Husky hardware provides wheel velocities
  estimate_velocity_from_position: false

  # Wheel separation and radius multipliers
  wheel_separation_multiplier: 1.875 # default: 1.0
  wheel_radius_multiplier    : 1.0 # default: 1.0

  # Velocity and acceleration limits
  # Whenever a min_* is unspecified, default to -max_*
  linear:
    x:
      has_velocity_limits    : true
      max_velocity           : 1.0   # m/s
      has_acceleration_limits: true
      max_acceleration       : 3.0   # m/s^2
  angular:
    z:
      has_velocity_limits    : true
      max_velocity           : 2.0   # rad/s
      has_acceleration_limits: true
      max_acceleration       : 6.0   # rad/s^2
      
joint_state_controller:
    type: joint_state_controller/JointStateController
    publish_rate: 50

panda_arm_controller:
    type: effort_controllers/JointTrajectoryController
    
    state_publish_rate: 25
    
    joints:
        - panda_joint1
        - panda_joint2
        - panda_joint3
        - panda_joint4
        - panda_joint5
        - panda_joint6
        - panda_joint7

    gains:
        panda_joint1: { p: 12000, d: 50, i: 0.0, i_clamp: 10000 }
        panda_joint2: { p: 30000, d: 100, i: 0.02, i_clamp: 10000 }
        panda_joint3: { p: 18000, d: 50, i: 0.01, i_clamp: 1 }
        panda_joint4: { p: 18000, d: 70, i: 0.01, i_clamp: 10000 }
        panda_joint5: { p: 12000, d: 70, i: 0.01, i_clamp: 1 }
        panda_joint6: { p: 7000, d: 50, i: 0.01, i_clamp: 1 }
        panda_joint7: { p: 2000, d: 20, i: 0.0, i_clamp: 1 }

    constraints:
        goal_time: 2.0

   

   
      
# arm_id:                           $(arg arm_id)
# singularity_warning_threshold:    0.0001               # print a warning if the smallest singular value of J x J^T drops below this value (use -1 to disable)
# tau_ext_lowpass_filter:           1.0                  # Exponential Moving average filter: range between and zero (infinite delay) one (no filtering)
# 
# franka_gripper:
#   type:    franka_gazebo/FrankaGripperSim
#   arm_id:  $(arg arm_id)
# 
#   finger1:
#     gains: { p: 100, i: 0, d: 1.0 }
# 
#   finger2:
#     gains: { p: 100, i: 0, d: 1.0 }
#     
# franka_state_controller:
#   type: franka_control/FrankaStateController
#   publish_rate: 30  # [Hz]
#   arm_id: $(arg arm_id)
#   joint_names:
#     - $(arg arm_id)_joint1
#     - $(arg arm_id)_joint2
#     - $(arg arm_id)_joint3
#     - $(arg arm_id)_joint4
#     - $(arg arm_id)_joint5
#     - $(arg arm_id)_joint6
#     - $(arg arm_id)_joint7
# 
# model_example_controller:
#   type: franka_example_controllers/ModelExampleController
#   arm_id: $(arg arm_id)
# 
# force_example_controller:
#   type: franka_example_controllers/ForceExampleController
#   arm_id: $(arg arm_id)
#   joint_names:
#     - $(arg arm_id)_joint1
#     - $(arg arm_id)_joint2
#     - $(arg arm_id)_joint3
#     - $(arg arm_id)_joint4
#     - $(arg arm_id)_joint5
#     - $(arg arm_id)_joint6
#     - $(arg arm_id)_joint7
# 
# cartesian_impedance_example_controller:
#   type: franka_example_controllers/CartesianImpedanceExampleController
#   arm_id: $(arg arm_id)
#   joint_names:
#     - $(arg arm_id)_joint1
#     - $(arg arm_id)_joint2
#     - $(arg arm_id)_joint3
#     - $(arg arm_id)_joint4
#     - $(arg arm_id)_joint5
#     - $(arg arm_id)_joint6
#     - $(arg arm_id)_joint7
# 
# effort_joint_trajectory_controller:
#   type: effort_controllers/JointTrajectoryController
#   joints:
#     - $(arg arm_id)_joint1
#     - $(arg arm_id)_joint2
#     - $(arg arm_id)_joint3
#     - $(arg arm_id)_joint4
#     - $(arg arm_id)_joint5
#     - $(arg arm_id)_joint6
#     - $(arg arm_id)_joint7
#   gains:
#     $(arg arm_id)_joint1: { p: 600, d: 30, i: 0 }
#     $(arg arm_id)_joint2: { p: 600, d: 30, i: 0 }
#     $(arg arm_id)_joint3: { p: 600, d: 30, i: 0 }
#     $(arg arm_id)_joint4: { p: 600, d: 30, i: 0 }
#     $(arg arm_id)_joint5: { p: 250, d: 10, i: 0 }
#     $(arg arm_id)_joint6: { p: 150, d: 10, i: 0 }
#     $(arg arm_id)_joint7: { p: 50, d: 5, i: 0 }
#   constraints:
#     goal_time: 0.5
#     $(arg arm_id)_joint1: { goal: 0.05 }
#     $(arg arm_id)_joint2: { goal: 0.05 }
#     $(arg arm_id)_joint3: { goal: 0.05 }
#     $(arg arm_id)_joint4: { goal: 0.05 }
#     $(arg arm_id)_joint5: { goal: 0.05 }
#     $(arg arm_id)_joint6: { goal: 0.05 }
#     $(arg arm_id)_joint7: { goal: 0.05 }
