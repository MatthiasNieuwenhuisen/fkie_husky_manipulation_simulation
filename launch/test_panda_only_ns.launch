<?xml version="1.0"?>
<launch>
    <arg name="robot_namespace" default="mob_manip"/>
    <arg name="paused" default="false" doc="Should the simulation directly be stopped at 0s?" />

    <!-- Robot Customization -->
    <arg name="arm_id" default="panda" doc="Name of the panda robot to spawn" />
    <arg name="use_gripper" default="false" doc="Should a franka hand be mounted on the flange?" />
    <arg name="controller" default=" " doc="Which example controller should be started? (One of {cartesian_impedance,model,force}_example_controller)" />
    <arg name="x" default="0" doc="How far forward to place the base of the robot in [m]?" />
    <arg name="y" default="0" doc="How far leftwards to place the base of the robot in [m]?" />
    <arg name="z" default="0" doc="How far upwards to place the base of the robot in [m]?" />
    <arg name="roll" default="0" doc="How much to rotate the base of the robot around its X-axis in [rad]?" />
    <arg name="pitch" default="0" doc="How much to rotate the base of the robot around its Y-axis in [rad]?" />
    <arg name="yaw" default="0" doc="How much to rotate the base of the robot around its Z-axis in [rad]?" />
    <arg name="initial_joint_positions" doc="Initial joint configuration of the panda. Specify as a list of name/value pairs in form of '-J [name-of-joint] [value-in-rad]'. Default is a 90 degree bend in the elbow" default="-J $(arg arm_id)_joint1 0
                -J $(arg arm_id)_joint2 0
                -J $(arg arm_id)_joint3 0
                -J $(arg arm_id)_joint4 -1.57079632679
                -J $(arg arm_id)_joint5 0
                -J $(arg arm_id)_joint6 1.57079632679
                -J $(arg arm_id)_joint7 0.785398163397
                -J $(arg arm_id)_finger_joint1 0.001
                -J $(arg arm_id)_finger_joint2 0.001" />

<group ns="$(arg robot_namespace)">

    <param name="robot_description" command="xacro $(find fkie_husky_manipulation_simulation)/urdf/panda_arm.urdf.xacro gazebo:=true hand:=$(arg use_gripper) arm_id:=$(arg arm_id) xyz:='$(arg x) $(arg y) $(arg z)' rpy:='$(arg roll) $(arg pitch) $(arg yaw)'">
    </param>

    <rosparam file="$(find franka_gazebo)/config/franka_hw_sim.yaml" subst_value="true" /> -->
    <rosparam file="$(find franka_gazebo)/config/sim_controllers.yaml" subst_value="true" />
    <rosparam file="$(find fkie_husky_manipulation_simulation)/config/test.yaml" command="load"/>


    <arg name="unpause" value="$(eval '' if arg('paused') else '-unpause')" />
    <node name="$(arg arm_id)_model_spawner" pkg="gazebo_ros" type="spawn_model" args="-param /$(arg robot_namespace)/robot_description -urdf -model $(arg robot_namespace) $(arg unpause)
              $(arg initial_joint_positions)
              "/>

    <!-- Spawn required ROS controllers -->
    <node pkg="controller_manager" type="spawner" name="$(arg arm_id)_gripper_spawner" if="$(arg use_gripper)" args="franka_gripper" respawn="false" />

    <node pkg="controller_manager" type="spawner" name="$(arg arm_id)_controller_spawner" respawn="false" output="screen" args="effort_joint_trajectory_controller $(arg controller)" />
<!--      <node pkg="controller_manager" type="spawner" name="$(arg arm_id)_controller_spawner" respawn="false" output="screen" args="joint_state_controller panda_arm_controller" /> -->

    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher">
        <rosparam param="source_list">[effort_joint_trajectory_controller/joint_states] </rosparam>
        <param name="rate" value="30"/>
    </node>
 </group>

</launch>
