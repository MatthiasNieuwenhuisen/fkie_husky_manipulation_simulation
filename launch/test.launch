<launch>
      <arg name="robot_namespace" default="husky"/>
      <arg name="realsense_d435_enabled" default="true"/>
      <arg name="global_frame" default="/world"/>
      <arg name="capability_group" default="sim-robot"/>
      <arg name="use_gripper" default="false" doc="Should a franka hand be mounted on the flange?" />
      <arg name="controller" default=" "/>
      <arg name="paused" default="false" doc="Should the simulation directly be stopped at 0s?" />
      <arg name="arm_id" default="panda" doc="Name of the panda robot to spawn" />
      <arg name="x" default="6" doc="How far forward to place the base of the husky robot in [m]?" />
      <arg name="y" default="-15" doc="How far leftwards to place the base of the husky robot in [m]?" />
      <arg name="z" default="0.15" doc="How far upwards to place the base of the husky robot in [m]?" />
      <arg name="yaw" default="2.626509" doc="How much to rotate the base of the husky robot around its Z-axis in [rad]?" />
      <arg name="initial_joint_positions" doc="Initial joint configuration of the panda. Specify as a list of name/value pairs in form of '-J [name-of-joint] [value-in-rad]'. Default is a 90 degree bend in the elbow" default="-J $(arg arm_id)_joint1 0
                -J $(arg arm_id)_joint2 0
                -J $(arg arm_id)_joint3 0
                -J $(arg arm_id)_joint4 -1.57079632679
                -J $(arg arm_id)_joint5 0
                -J $(arg arm_id)_joint6 1.57079632679
                -J $(arg arm_id)_joint7 0.785398163397
             " />

      <group ns="$(arg robot_namespace)">
            <!-- Load robot description  -->
            <param name="robot_description" command="xacro $(find fkie_husky_manipulation_simulation)/urdf/husky_panda.urdf.xacro robot_namespace:=$(arg robot_namespace) realsense_d435_enabled:=$(arg realsense_d435_enabled)">
            </param>

            <!-- Convert joint states to TF  -->
            <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" clear_params="true">
                  <param name="capability_group" value="$(arg capability_group)"/>
                  <param name="nm/kill_on_stop" value="300"/>
            </node>

            <!-- Load the controller configs  -->
            <rosparam file="$(find fkie_husky_manipulation_simulation)/config/test.yaml" command="load"/>

            <arg name="unpause" value="$(eval '' if arg('paused') else '-unpause')" />

            <!--  Spawn the robot   -->
            <node name="$(arg robot_namespace)_$(arg arm_id)_full_model_spawner" pkg="gazebo_ros" type="spawn_model" args="-x $(arg x) -y $(arg y) -z $(arg z) -Y $(arg yaw)
              -param /$(arg robot_namespace)/robot_description -urdf -model $(arg robot_namespace) $(arg unpause) $(arg initial_joint_positions)">
              <param name="capability_group" value="$(arg capability_group)"/>
                  <param name="nm/kill_on_stop" value="300"/>
            </node>

            <node name="$(arg robot_namespace)_$(arg arm_id)_controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="husky_velocity_controller husky_joint_publisher joint_state_controller panda_arm_controller">
                  <param name="capability_group" value="$(arg capability_group)"/>
                  <param name="nm/kill_on_stop" value="300"/>
            </node>

            <!-- Add static transform between odom and world  -->
            <node name="$(arg robot_namespace)_static_tf_world_odom" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 $(arg global_frame) odom">
                  <param name="capability_group" value="$(arg capability_group)"/>
                  <param name="nm/kill_on_stop" value="300"/>
            </node>

            <!--TODO:check if okay, Add static transform between odom and base_link  -->
            <node name="$(arg robot_namespace)_static_tf_odom_baselink" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 odom base_link">
                  <param name="capability_group" value="$(arg capability_group)"/>
                  <param name="nm/kill_on_stop" value="300"/>
            </node>
      </group>

</launch>